#!/bin/bash
#
# Copyright (C) Niklaus F.Schen.
#

#  test system type
sysname=`uname -s`

#installation path
if ! case $sysname in MINGW*) false;; esac; then
    install_path=$HOME/libmelon
    cc="gcc"
else
    install_path=`echo "/usr/local/melon"`
    cc="cc"
fi
mysql_lib=""

#get all parameters
for param in $@
do
    if [ $param == "--help" ]; then
        echo -e "\nMelon platform."
        echo "Copyright (C) Niklaus F.Schen."
        echo "Options:"
        echo -e "\t--prefix=INSTALL_PATH"
        echo -e "\t--cc=C compiler"
        exit 0
    fi
    param_prefix=`echo $param|cut -d '=' -f 1`
    param_suffix=`echo $param|cut -d '=' -f 2`
    if [ $param_prefix == "--prefix" ]; then
        install_path=$param_suffix
    fi
    if [ $param_prefix == "--cc" ]; then
        cc=$param_suffix
    fi
done

#output installation path
echo -e "Installation Path \t[$install_path]"
echo -e "#include <stdio.h>\nint main(int argc, char *argv[]) {printf(\"%s\", argv[1]);return 0;}" > .path_generator.c
$cc -o path_generator .path_generator.c
realpath=`./path_generator $install_path`
nullpath=`./path_generator /dev/null`
if ! case $sysname in MINGW*) false;; esac; then
    melanglibpath=`./path_generator $HOME/lib/melang`
    melangdylibpath=`./path_generator $HOME/lib/melang_dynamic`
else
    melanglibpath=`./path_generator /usr/local/lib/melang`
    melangdylibpath=`./path_generator /usr/local/lib/melang_dynamic`
fi
rm -f path_generator .path_generator.c
#build path.c & h
echo -e "\n/*\n * Copyright (C) Niklaus F.Schen.\n */" > include/mln_path.h
echo -e "#ifndef __MLN_PATH_H\n#define __MLN_PATH_H" >> include/mln_path.h
echo -e "\ntypedef enum {\n    install,\n    null,\n    melang_lib,\n    melang_dylib\n} mln_path_type_t;" >> include/mln_path.h
echo -e "\ntypedef char *(*mln_path_hook_t)(void);" >> include/mln_path.h
echo -e "\nextern char *mln_path(void);" >> include/mln_path.h
echo -e "\nextern char *mln_null_path(void);" >> include/mln_path.h
echo -e "\nextern char *mln_melang_lib_path(void);" >> include/mln_path.h
echo -e "\nextern char *mln_melang_dylib_path(void);" >> include/mln_path.h
echo -e "\nextern void mln_path_hook_set(mln_path_type_t type, mln_path_hook_t hook);" >> include/mln_path.h
echo -e "\n#endif\n" >> include/mln_path.h

echo -e "\n/*\n * Copyright (C) Niklaus F.Schen.\n */" > src/mln_path.c
echo "#include <stdio.h>" >> src/mln_path.c
echo "#include \"mln_path.h\"" >> src/mln_path.c
echo -e "\nstatic char install_path[] = \"$realpath\";" >> src/mln_path.c
echo -e "\nstatic char null_path[] = \"$nullpath\";" >> src/mln_path.c
echo -e "\nstatic char melang_lib_path[] = \"$melanglibpath\";" >> src/mln_path.c
echo -e "\nstatic char melang_dylib_path[] = \"$melangdylibpath\";" >> src/mln_path.c
echo -e "\nstatic mln_path_hook_t _install_path = NULL;" >> src/mln_path.c
echo -e "\nstatic mln_path_hook_t _null_path = NULL;" >> src/mln_path.c
echo -e "\nstatic mln_path_hook_t _melang_lib_path = NULL;" >> src/mln_path.c
echo -e "\nstatic mln_path_hook_t _melang_dylib_path = NULL;" >> src/mln_path.c
echo -e "\nvoid mln_path_hook_set(mln_path_type_t type, mln_path_hook_t hook)\n{" >> src/mln_path.c
echo -e "    switch (type) {\n" >> src/mln_path.c
echo -e "        case install:\n            _install_path = hook;\n            break;" >> src/mln_path.c
echo -e "        case null:\n            _null_path = hook;\n            break;" >> src/mln_path.c
echo -e "        case melang_lib:\n            _melang_lib_path = hook;\n            break;" >> src/mln_path.c
echo -e "        case melang_dylib:\n            _melang_dylib_path = hook;\n            break;" >> src/mln_path.c
echo -e "        default:\n            break;" >> src/mln_path.c
echo -e "    }" >> src/mln_path.c
echo -e "}" >> src/mln_path.c
echo -e "\nchar *mln_path(void)\n{" >> src/mln_path.c
echo "    return _install_path == NULL? install_path: _install_path();" >> src/mln_path.c
echo "}" >> src/mln_path.c
echo -e "\nchar *mln_null_path(void)\n{" >> src/mln_path.c
echo "    return _null_path == NULL? null_path: _null_path();" >> src/mln_path.c
echo "}" >> src/mln_path.c
echo -e "\nchar *mln_melang_lib_path(void)\n{" >> src/mln_path.c
echo "    return _melang_lib_path == NULL? melang_lib_path: _melang_lib_path();" >> src/mln_path.c
echo "}" >> src/mln_path.c
echo -e "\nchar *mln_melang_dylib_path(void)\n{" >> src/mln_path.c
echo "    return _melang_dylib_path == NULL? melang_dylib_path: _melang_dylib_path();" >> src/mln_path.c
echo "}" >> src/mln_path.c


#build melang.c&h file
#  header file
cnt=0
for file in `ls melang`
do
        test -d melang/$file && let cnt+=1 > /dev/null
done
echo "/*" > include/mln_melang.h
echo " * Copyright (C) Niklaus F.Schen." >> include/mln_melang.h
echo " */" >> include/mln_melang.h
echo "#ifndef __MLN_MELANG_H" >> include/mln_melang.h
echo "#define __MLN_MELANG_H" >> include/mln_melang.h
echo "#include \"mln_lang.h\"" >> include/mln_melang.h
echo "#define M_N_INSTALLER $cnt" >> include/mln_melang.h
echo "typedef int (*melang_installer)(mln_lang_ctx_t *);" >> include/mln_melang.h
echo "extern melang_installer mln_melang_installers[];" >> include/mln_melang.h
echo "#endif" >> include/mln_melang.h
#  source file
echo "/*" > src/mln_melang.c
echo " * Copyright (C) Niklaus F.Schen." >> src/mln_melang.c
echo " */" >> src/mln_melang.c
echo "#include \"mln_melang.h\"" >> src/mln_melang.c
for file in `ls melang`
do
        test -d melang/$file && echo '#include "'$file'/mln_lang_'$file'.h"' >> src/mln_melang.c
done
echo "melang_installer mln_melang_installers[$cnt] = {" >> src/mln_melang.c
for file in `ls melang`
do
        test -d melang/$file && echo 'mln_lang_'$file',' >> src/mln_melang.c
done
echo "};" >> src/mln_melang.c

# build sub include directory for melang
mkdir .tmpSubIncs 2> /dev/null
for tmpdir in `ls melang/`
do
    if [ $tmpdir = "." -o $tmpdir = ".." ]; then
        continue
    fi
    mkdir .tmpSubIncs/$tmpdir 2> /dev/null
    cp -f melang/$tmpdir/*.h .tmpSubIncs/$tmpdir/ 2> /dev/null
done



#  build makefile content
echo "# " > Makefile
echo "# Copyright (C) Niklaus F.Schen." >> Makefile
echo "# " >> Makefile
echo -e "CC\t\t= $cc" >> Makefile
gccver=`gcc -dumpversion|cut -d '.' -f 1`
if [ $sysname != 'Darwin' -a "$?" == "0" -a $gccver -ge 11 ]; then
    echo -e "FLAGS\t\t= -Iinclude -Imelang -c -Wall -ggdb -Werror -O2 -fPIC" >> Makefile
else
    echo -e "FLAGS\t\t= -Iinclude -Imelang -c -Wall -ggdb -Werror -O3 -fPIC" >> Makefile
fi
if ! case $sysname in MINGW*) false;; esac; then
    echo -e "MELONSO\t\t= libmelon.dll" >> Makefile
    echo -e "MELONA\t\t= libmelon.lib" >> Makefile
else
    echo -e "MELONSO\t\t= libmelon.so" >> Makefile
    echo -e "MELONA\t\t= libmelon.a" >> Makefile
fi
echo -e "OBJS\t\t= \\" >> Makefile
hasDot=`ls -l src/|grep "\.\."`
cnt=2
if [ -z $hasDot ]; then
  cnt=0
fi
sum=`ls -l src/|wc -l`
for path in `find . -name "*.c"`
do
        fname=`basename $path`
    objname=`echo $fname | cut -d '.' -f 1`".o"
    echo -n "        objs/"$objname >> Makefile
    if [ $cnt -lt $sum ]; then
        echo " \\" >> Makefile
    fi
    let cnt+=1 > /dev/null
done
echo "" >> Makefile

echo -e ".PHONY :\tcompile modules install clean" >> Makefile

echo "compile: MKDIR \$(OBJS) \$(MELONSO) \$(MELONA)" >> Makefile
echo "clean:" >> Makefile
echo -e "\trm -fr objs lib .tmpSubIncs Makefile" >> Makefile
echo "MKDIR :" >> Makefile
echo -e "\ttest -d objs || mkdir objs" >> Makefile
echo -e "\ttest -d lib || mkdir lib" >> Makefile

echo "\$(MELONA) : \$(OBJS)" >> Makefile
echo -e "\tar -r lib/\$(MELONA) \$(OBJS)" >> Makefile
echo "\$(MELONSO) : \$(OBJS)" >> Makefile

#test MySQL Asynchronous----------#
echo -e "#include <stdio.h>\n#include <mysql.h>" > mysql_test.c
echo "int main(void){MYSQL *mysql_local = mysql_init(NULL);mysql_real_connect_nonblocking(mysql_local, NULL, NULL, NULL, NULL, 3306, NULL, 0);return 0;}" >> mysql_test.c
cc -o mysql_test mysql_test.c -I/usr/include/mysql/ -L/usr/lib64/mysql/ -lmysqlclient 2>/dev/null
if [ "$?" == "0" ]; then
    mysql=1
    mysql_lib="-I /usr/include/mysql -L /usr/lib64/mysql -lmysqlclient"
    echo -e "MySQL Asynchronous\t[support]"
else
    mysql=0
    echo -e "MySQL Asynchronous\t[not support]"
fi
rm -fr mysql_test mysql_test.c
#test MySQL Asynchronous end------#

if [ $sysname = 'Linux' ]; then
    echo -e "\t\$(CC) -o lib/\$(MELONSO) \$(OBJS) -ggdb -Wall -lpthread -Llib/ -ldl $mysql_lib -shared -fPIC" >> Makefile
elif ! case $sysname in MINGW*) false;; esac; then
    echo -e "\t\$(CC) -o lib/\$(MELONSO) \$(OBJS) -ggdb -Wall -lpthread -lWs2_32 -Llib/ $mysql_lib -shared -fPIC" >> Makefile
else
    echo -e "\t\$(CC) -o lib/\$(MELONSO) \$(OBJS) -ggdb -Wall -lpthread -Llib/ -lc $mysql_lib -shared -fPIC" >> Makefile
fi
echo "install:" >> Makefile
echo -e "\ttest -d $melanglibpath || mkdir -p $melanglibpath" >> Makefile
echo -e "\ttest -d $install_path || mkdir -p $install_path" >> Makefile
echo -e "\tcp -fr lib $install_path" >> Makefile
echo -e "\tcp -fr include $install_path" >> Makefile
echo -e "\tcp -fr .tmpSubIncs/* $install_path/include" >> Makefile
echo -e "\ttest -d $install_path/conf || cp -fr conf $install_path" >> Makefile


for fname in `find . -name "*.c"`
do
    objname=`basename $fname | cut -d '.' -f 1`".o"
    echo -n "objs/$objname :" >> Makefile
    for header in `cpp -MM -MG $fname 2> /dev/null`
    do
        suffix=`echo $header | cut -d '.' -f 2`
        if [ $suffix = 'c' ]; then
            echo -n $header >> Makefile
            echo -n " " >> Makefile
            continue
        fi
        if [ $suffix != 'h' ]; then
            continue
        fi
        test -e include/$header && echo -n "include/$header " >> Makefile
        test -e melang/$header && echo -n "melang/$header " >> Makefile
    done
    echo "" >> Makefile
    test $fname = "./src/mln_event.c"
    if [ $? -eq 0 ]; then
    #test event system call
        echo "#include<stdio.h>
        #include<sys/epoll.h>
        int main(void){epoll_create(10);return 0;}" > ev_test.c
        cc -o ev_test ev_test.c 2>/dev/null
        if [ "$?" == "0" ]; then
            echo -e "event\t\t\t[EPOLL]"
            echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname -DMLN_EPOLL" >> Makefile
            rm -f ev_test ev_test.c
            continue
        fi
        echo "#include<stdio.h>
        #include<sys/types.h>
        #include<sys/event.h>
        #include<sys/time.h>
        int main(void){kqueue();return 0;}" > ev_test.c
        cc -o ev_test ev_test.c 2>/dev/null
        if [ "$?" == "0" ]; then
            echo -e "event\t\t\t[KQUEUE]"
            echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname -DMLN_KQUEUE" >> Makefile
            rm -f ev_test ev_test.c
            continue
        fi
        rm -f ev_test ev_test.c
        echo -e "event\t\t\t[SELECT]"
        echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname -DMLN_SELECT" >> Makefile
        continue
    fi

        test $fname = "./src/mln_connection.c"
        if [ $? -eq 0 ]; then
        sendfile=0
        #test sendfile
        echo "#include <sys/sendfile.h>
        int main(void){sendfile(1,0,0,1);return 0;}" > sendfile_test.c
        cc -o sendfile_test sendfile_test.c 2>/dev/null
        if [ "$?" == "0" ]; then
            sendfile=1
            echo -e "sendfile\t\t[support]"
        else
            echo -e "sendfile\t\t[NOT support]"
        fi
        rm -f sendfile_test sendfile_test.c
    #test writev
        echo -e "#include <stdio.h>\n#include <sys/uio.h>" > writev_test.c
        echo "int main(void){writev(0,NULL,0);return 0;}" >> writev_test.c
        cc -o writev_test writev_test.c 2>/dev/null
        if [ "$?" == "0" ]; then
            echo -e "writev\t\t\t[support]"
            if [ $sendfile -eq "1" ]; then
                echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname -DMLN_SENDFILE -DMLN_WRITEV" >> Makefile
            else
                echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname -DMLN_WRITEV" >> Makefile
            fi
        else
            echo -e "writev\t\t\t[NOT support]"
            if [ $sendfile -eq "1" ]; then
                echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname -DMLN_SENDFILE" >> Makefile
            else
                echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname" >> Makefile
            fi
        fi
        rm -f writev_test writev_test.c
        continue
        fi

        test $fname = "./src/mln_thread_pool.c"
    if [ $? -eq 0 ]; then
        unix98=0
    #test __USE_UNIX98
        echo -e "#ifndef __USE_UNIX98\n#define __USE_UNIX98\n#endif\n#include <pthread.h>\n" > unix98_test.c
        echo "int main(void){pthread_setconcurrency(0);return 0;}" >> unix98_test.c
        cc -o unix98_test unix98_test.c -lpthread 2>/dev/null
        if [ "$?" == "0" ]; then
            echo -e "__USE_UNIX98\t\t[support]"
            echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname -DMLN_USE_UNIX98" >> Makefile
        else
            echo -e "__USE_UNIX98\t\t[not support]"
            echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname" >> Makefile
        fi
        rm -fr unix98_test unix98_test.c
        continue
    fi

    test $fname = "./melang/mysql/mln_lang_mysql.c"
    if [ $? -eq 0 ]; then
        if [ $mysql -eq 1 ]; then
            echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname -DMLN_MYSQL $mysql_lib" >> Makefile
        else
            echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname" >> Makefile
        fi
        continue
    fi
    test $fname = "./src/mln_melang.c"
    if [ $? -eq 0 ]; then
        if [ $mysql -eq 1 ]; then
            echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname $mysql_lib" >> Makefile
        else
            echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname" >> Makefile
        fi
        continue
    fi

    echo -e "\t\$(CC) \$(FLAGS) -o \$@ $fname" >> Makefile
done

#generate conf file
sed -e "s#{{ROOT}}#${realpath}#g" conf/melon.conf.template > conf/melon.conf

echo "Configure done!"

